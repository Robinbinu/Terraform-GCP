
Initializing the backend...

Initializing the backend...

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/google from the dependency lock file
- Using previously-installed hashicorp/google v6.8.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/google from the dependency lock file
- Using previously-installed hashicorp/google v6.8.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/google from the dependency lock file
- Using previously-installed hashicorp/google v6.8.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/google from the dependency lock file
- Using previously-installed hashicorp/google v6.8.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform planned the following actions, but then encountered a problem:

  # google_compute_firewall.allow_http[0] will be created
  + resource "google_compute_firewall" "allow_http" {
      + creation_timestamp = (known after apply)
      + description        = "Allow HTTP and HTTPS traffic to VM instances with http-server tag"
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "my-web-server-allow-http"
      + network            = "default"
      + priority           = 1000
      + project            = "your-gcp-project-id"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + target_tags        = [
          + "http-server",
          + "https-server",
        ]

      + allow {
          + ports    = [
              + "80",
              + "443",
            ]
          + protocol = "tcp"
        }
    }

  # google_compute_instance.default will be created
  + resource "google_compute_instance" "default" {
      + can_ip_forward          = false
      + cpu_platform            = (known after apply)
      + current_status          = (known after apply)
      + deletion_protection     = false
      + desired_status          = "RUNNING"
      + effective_labels        = {
          + "created-by"                 = "terraform"
          + "environment"                = "development"
          + "goog-terraform-provisioned" = "true"
          + "instance-state"             = "running"
          + "os-type"                    = "ubuntu"
          + "preemptible"                = "false"
        }
      + id                      = (known after apply)
      + instance_id             = (known after apply)
      + label_fingerprint       = (known after apply)
      + labels                  = {
          + "created-by"     = "terraform"
          + "environment"    = "development"
          + "instance-state" = "running"
          + "os-type"        = "ubuntu"
          + "preemptible"    = "false"
        }
      + machine_type            = "e2-micro"
      + metadata                = {
          + "enable-oslogin"     = "true"
          + "startup-script-url" = ""
        }
      + metadata_fingerprint    = (known after apply)
      + metadata_startup_script = <<-EOT
            #!/bin/bash
            echo "=== Starting Ubuntu VM Setup ===" | tee -a /var/log/startup.log
            echo "Timestamp: $(date)" | tee -a /var/log/startup.log
            echo "Updating package lists..." | tee -a /var/log/startup.log
            apt-get update 2>&1 | tee -a /var/log/startup.log
            echo "Installing Apache2..." | tee -a /var/log/startup.log
            apt-get install -y apache2 2>&1 | tee -a /var/log/startup.log
            echo "Creating hello world page..." | tee -a /var/log/startup.log
            mkdir -p /var/www/html
            echo "<h1>Hello, World!</h1><p>VM: my-web-server</p><p>Zone: us-central1-a</p><p>Machine Type: e2-micro</p>" > /var/www/html/index.html
            echo "Starting Apache2..." | tee -a /var/log/startup.log
            systemctl start apache2 2>&1 | tee -a /var/log/startup.log
            systemctl enable apache2 2>&1 | tee -a /var/log/startup.log
            echo "=== Ubuntu VM Setup Complete ===" | tee -a /var/log/startup.log
        EOT
      + min_cpu_platform        = (known after apply)
      + name                    = "my-web-server"
      + project                 = "your-gcp-project-id"
      + self_link               = (known after apply)
      + tags                    = [
          + "http-server",
          + "https-server",
          + "terraform-managed",
        ]
      + tags_fingerprint        = (known after apply)
      + terraform_labels        = {
          + "created-by"                 = "terraform"
          + "environment"                = "development"
          + "goog-terraform-provisioned" = "true"
          + "instance-state"             = "running"
          + "os-type"                    = "ubuntu"
          + "preemptible"                = "false"
        }
      + zone                    = "us-central1-a"

      + boot_disk {
          + auto_delete                = true
          + device_name                = (known after apply)
          + disk_encryption_key_sha256 = (known after apply)
          + kms_key_self_link          = (known after apply)
          + mode                       = "READ_WRITE"
          + source                     = (known after apply)

          + initialize_params {
              + image                  = "projects/ubuntu-os-cloud/global/images/family/ubuntu-minimal-2404-lts"
              + labels                 = (known after apply)
              + provisioned_iops       = (known after apply)
              + provisioned_throughput = (known after apply)
              + resource_policies      = (known after apply)
              + size                   = 20
              + type                   = "pd-standard"
            }
        }

      + network_interface {
          + internal_ipv6_prefix_length = (known after apply)
          + ipv6_access_type            = (known after apply)
          + ipv6_address                = (known after apply)
          + name                        = (known after apply)
          + network                     = "default"
          + network_ip                  = (known after apply)
          + stack_type                  = (known after apply)
          + subnetwork                  = (known after apply)
          + subnetwork_project          = (known after apply)

          + access_config {
              + nat_ip       = (known after apply)
              + network_tier = (known after apply)
            }
        }

      + scheduling {
          + automatic_restart   = true
          + on_host_maintenance = "MIGRATE"
          + preemptible         = false
          + provisioning_model  = "STANDARD"
        }
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + access_information  = {
      + ssh_command    = "gcloud compute ssh my-web-server --zone=us-central1-a --project=your-gcp-project-id"
      + web_accessible = "true"
      + web_url        = (known after apply)
    }
  + cost_estimation     = {
      + disk_size_gb   = 20
      + estimated_note = "Visit Google Cloud Pricing Calculator for accurate cost estimates"
      + machine_type   = "e2-micro"
      + pricing_url    = "https://cloud.google.com/products/calculator"
    }
  + deployment_summary  = {
      + auto_restart   = true
      + current_status = (known after apply)
      + disk_size      = 20
      + http_server    = true
      + instance_id    = (known after apply)
      + instance_state = "RUNNING"
      + machine_type   = "e2-micro"
      + monitoring     = false
      + os_choice      = "ubuntu"
      + preemptible    = false
      + vm_name        = "my-web-server"
      + zone           = "us-central1-a"
    }
  + instance_details    = {
      + cpu_platform   = (known after apply)
      + current_status = (known after apply)
      + instance_id    = (known after apply)
      + labels         = {
          + created-by     = "terraform"
          + environment    = "development"
          + instance-state = "running"
          + os-type        = "ubuntu"
          + preemptible    = "false"
        }
      + self_link      = (known after apply)
      + tags           = [
          + "http-server",
          + "https-server",
          + "terraform-managed",
        ]
    }
  + instance_ip         = (known after apply)
  + network_information = {
      + external_ip  = (known after apply)
      + internal_ip  = (known after apply)
      + network_name = "default"
      + subnetwork   = (known after apply)
    }

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/google from the dependency lock file
- Using previously-installed hashicorp/google v6.8.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform planned the following actions, but then encountered a problem:

  # google_compute_firewall.allow_http[0] will be created
  + resource "google_compute_firewall" "allow_http" {
      + creation_timestamp = (known after apply)
      + description        = "Allow HTTP and HTTPS traffic to VM instances with http-server tag"
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "my-web-server-allow-http"
      + network            = "default"
      + priority           = 1000
      + project            = "intellicash-465015"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + target_tags        = [
          + "http-server",
          + "https-server",
        ]

      + allow {
          + ports    = [
              + "80",
              + "443",
            ]
          + protocol = "tcp"
        }
    }

  # google_compute_instance.default will be created
  + resource "google_compute_instance" "default" {
      + can_ip_forward          = false
      + cpu_platform            = (known after apply)
      + current_status          = (known after apply)
      + deletion_protection     = false
      + desired_status          = "RUNNING"
      + effective_labels        = {
          + "created-by"                 = "terraform"
          + "environment"                = "development"
          + "goog-terraform-provisioned" = "true"
          + "instance-state"             = "running"
          + "os-type"                    = "ubuntu"
          + "preemptible"                = "false"
        }
      + id                      = (known after apply)
      + instance_id             = (known after apply)
      + label_fingerprint       = (known after apply)
      + labels                  = {
          + "created-by"     = "terraform"
          + "environment"    = "development"
          + "instance-state" = "running"
          + "os-type"        = "ubuntu"
          + "preemptible"    = "false"
        }
      + machine_type            = "e2-micro"
      + metadata                = {
          + "enable-oslogin"     = "true"
          + "startup-script-url" = ""
        }
      + metadata_fingerprint    = (known after apply)
      + metadata_startup_script = <<-EOT
            #!/bin/bash
            echo "=== Starting Ubuntu VM Setup ===" | tee -a /var/log/startup.log
            echo "Timestamp: $(date)" | tee -a /var/log/startup.log
            echo "Updating package lists..." | tee -a /var/log/startup.log
            apt-get update 2>&1 | tee -a /var/log/startup.log
            echo "Installing Apache2..." | tee -a /var/log/startup.log
            apt-get install -y apache2 2>&1 | tee -a /var/log/startup.log
            echo "Creating hello world page..." | tee -a /var/log/startup.log
            mkdir -p /var/www/html
            echo "<h1>Hello, World!</h1><p>VM: my-web-server</p><p>Zone: us-central1-a</p><p>Machine Type: e2-micro</p>" > /var/www/html/index.html
            echo "Starting Apache2..." | tee -a /var/log/startup.log
            systemctl start apache2 2>&1 | tee -a /var/log/startup.log
            systemctl enable apache2 2>&1 | tee -a /var/log/startup.log
            echo "=== Ubuntu VM Setup Complete ===" | tee -a /var/log/startup.log
        EOT
      + min_cpu_platform        = (known after apply)
      + name                    = "my-web-server"
      + project                 = "intellicash-465015"
      + self_link               = (known after apply)
      + tags                    = [
          + "http-server",
          + "https-server",
          + "terraform-managed",
        ]
      + tags_fingerprint        = (known after apply)
      + terraform_labels        = {
          + "created-by"                 = "terraform"
          + "environment"                = "development"
          + "goog-terraform-provisioned" = "true"
          + "instance-state"             = "running"
          + "os-type"                    = "ubuntu"
          + "preemptible"                = "false"
        }
      + zone                    = "us-central1-a"

      + boot_disk {
          + auto_delete                = true
          + device_name                = (known after apply)
          + disk_encryption_key_sha256 = (known after apply)
          + kms_key_self_link          = (known after apply)
          + mode                       = "READ_WRITE"
          + source                     = (known after apply)

          + initialize_params {
              + image                  = "projects/ubuntu-os-cloud/global/images/family/ubuntu-minimal-2404-lts"
              + labels                 = (known after apply)
              + provisioned_iops       = (known after apply)
              + provisioned_throughput = (known after apply)
              + resource_policies      = (known after apply)
              + size                   = 20
              + type                   = "pd-standard"
            }
        }

      + network_interface {
          + internal_ipv6_prefix_length = (known after apply)
          + ipv6_access_type            = (known after apply)
          + ipv6_address                = (known after apply)
          + name                        = (known after apply)
          + network                     = "default"
          + network_ip                  = (known after apply)
          + stack_type                  = (known after apply)
          + subnetwork                  = (known after apply)
          + subnetwork_project          = (known after apply)

          + access_config {
              + nat_ip       = (known after apply)
              + network_tier = (known after apply)
            }
        }

      + scheduling {
          + automatic_restart   = true
          + on_host_maintenance = "MIGRATE"
          + preemptible         = false
          + provisioning_model  = "STANDARD"
        }
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + access_information  = {
      + ssh_command    = "gcloud compute ssh my-web-server --zone=us-central1-a --project=intellicash-465015"
      + web_accessible = "true"
      + web_url        = (known after apply)
    }
  + cost_estimation     = {
      + disk_size_gb   = 20
      + estimated_note = "Visit Google Cloud Pricing Calculator for accurate cost estimates"
      + machine_type   = "e2-micro"
      + pricing_url    = "https://cloud.google.com/products/calculator"
    }
  + deployment_summary  = {
      + auto_restart   = true
      + current_status = (known after apply)
      + disk_size      = 20
      + http_server    = true
      + instance_id    = (known after apply)
      + instance_state = "RUNNING"
      + machine_type   = "e2-micro"
      + monitoring     = false
      + os_choice      = "ubuntu"
      + preemptible    = false
      + vm_name        = "my-web-server"
      + zone           = "us-central1-a"
    }
  + instance_details    = {
      + cpu_platform   = (known after apply)
      + current_status = (known after apply)
      + instance_id    = (known after apply)
      + labels         = {
          + created-by     = "terraform"
          + environment    = "development"
          + instance-state = "running"
          + os-type        = "ubuntu"
          + preemptible    = "false"
        }
      + self_link      = (known after apply)
      + tags           = [
          + "http-server",
          + "https-server",
          + "terraform-managed",
        ]
    }
  + instance_ip         = (known after apply)
  + network_information = {
      + external_ip  = (known after apply)
      + internal_ip  = (known after apply)
      + network_name = "default"
      + subnetwork   = (known after apply)
    }
